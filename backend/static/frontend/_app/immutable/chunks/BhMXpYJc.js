import{g as d,A as u}from"./D5v_xaba.js";function c(){const e=localStorage.getItem("userToken");if(!e)throw new Error("Please log in to continue");return e}async function f(){try{const e=c();console.log("Fetching knowledge bases from:",d("/knowledgebases"));const t=await fetch(d("/knowledgebases"),{headers:{Authorization:`Bearer ${e}`}});if(!t.ok)throw console.error("API error response:",t.status,t.statusText),new Error(`Error: ${t.status} - ${t.statusText}`);const o=await t.json();if(console.log("Raw API response:",JSON.stringify(o,null,2)),o.status==="error"&&o.message==="Knowledge Base server offline")throw console.warn("Knowledge Base server is offline or not configured"),new Error("Knowledge Base server offline");return o.knowledge_bases||[]}catch(e){throw console.error("Error fetching knowledge bases:",e),e}}async function h(e){try{const t=c();console.log(`Fetching knowledge base with ID ${e}`);const o=await fetch(d(`/knowledgebases/kb/${e}`),{headers:{Authorization:`Bearer ${t}`}});if(!o.ok)throw console.error("API error response:",o.status,o.statusText),new Error(`Error: ${o.status} - ${o.statusText}`);const r=await o.json();if(console.log("Knowledge base details (raw JSON):",JSON.stringify(r,null,2)),r.status==="error"&&r.message==="Knowledge Base server offline")throw console.warn("Knowledge Base server is offline or not configured"),new Error("Knowledge Base server offline");console.log("Knowledge base ID:",r.id),console.log("Knowledge base name:",r.name);const s=r;if(console.log("Knowledge base description:",s.description),console.log("Knowledge base metadata:",s.metadata),s.metadata&&typeof s.metadata=="string")try{const n=JSON.parse(s.metadata);console.log("Parsed metadata:",n);const a=n;a.description&&console.log("Found description in parsed metadata:",a.description)}catch(n){console.warn("Could not parse metadata as JSON:",n)}return r}catch(t){throw console.error(`Error fetching knowledge base ${e}:`,t),t}}async function y(e){try{const t=c();console.log("Creating knowledge base (full data):",e),console.log("Description being sent in creation:",e.description),e.description||(console.warn("Description is empty or undefined, setting to empty string"),e.description="");const o=await fetch(d("/knowledgebases"),{method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify(e)});if(!o.ok){console.error("API error response:",o.status,o.statusText);const s=await o.text();throw new Error(`Error: ${o.status} - ${s}`)}const r=await o.json();return console.log("Created knowledge base:",r),r}catch(t){throw console.error("Error creating knowledge base:",t),t}}async function $(e,t){try{const o=c();console.log(`Updating knowledge base ${e}:`,t),console.log("Description being sent in update:",t.description);const s=await fetch(d(`/knowledgebases/kb/${e}`),{method:"PATCH",headers:{Authorization:`Bearer ${o}`,"Content-Type":"application/json"},body:JSON.stringify(t)});if(!s.ok){console.error("API error response:",s.status,s.statusText);const a=await s.text();throw new Error(`Error: ${s.status} - ${a}`)}const n=await s.json();return console.log("Updated knowledge base:",n),n}catch(o){throw console.error(`Error updating knowledge base ${e}:`,o),o}}async function m(e,t){try{const o=c(),r=new FormData;t.forEach(a=>{r.append("files",a)}),console.log(`Uploading ${t.length} files to knowledge base ${e}`);const s=await fetch(d(`/knowledgebases/kb/${e}/files`),{method:"POST",headers:{Authorization:`Bearer ${o}`},body:r});if(!s.ok){console.error("API error response:",s.status,s.statusText);const a=await s.text();throw new Error(`Error: ${s.status} - ${a}`)}const n=await s.json();return console.log("Uploaded files:",n),n}catch(o){throw console.error(`Error uploading files to knowledge base ${e}:`,o),o}}async function k(e,t){try{const o=c();console.log(`Deleting file ${t} from knowledge base ${e}`);const r=await fetch(d(`/knowledgebases/kb/${e}/files/${t}`),{method:"DELETE",headers:{Authorization:`Bearer ${o}`}});if(!r.ok){console.error("API error response:",r.status,r.statusText);const n=await r.text();throw new Error(`Error: ${r.status} - ${n}`)}const s=await r.json();return console.log("Deleted file:",s),s}catch(o){throw console.error(`Error deleting file ${t} from knowledge base ${e}:`,o),o}}async function b(e,t,o={}){try{const r=c(),{pluginName:s="simple_query",pluginParams:n={}}=o,a=s==="simple_query"?{top_k:5,threshold:0,...n}:n,i={query_text:t,plugin_name:s,plugin_params:a};console.log(`Querying knowledge base ${e} with: ${t}`);const l=await fetch(d(`/knowledgebases/kb/${e}/query`),{method:"POST",headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"},body:JSON.stringify(i)});if(!l.ok){console.error("API error response:",l.status,l.statusText);const w=await l.text();throw new Error(`Error: ${l.status} - ${w}`)}const g=await l.json();if(console.log("Query results:",g),g.status==="error"&&g.message==="Knowledge Base server offline")throw console.warn("Knowledge Base server is offline or not configured"),new Error("Knowledge Base server offline");return g}catch(r){throw console.error(`Error querying knowledge base ${e}:`,r),r}}async function E(){try{const e=await f();let t=null;return e.length>0&&e[0]&&(t=e[0].owner||null),e.map(r=>({id:r.id||"",name:r.name||"",description:r.description||"",owner:r.owner||"",files:Array.isArray(r.files)?r.files:[],metadata:r.metadata||{},created_at:r.created_at||null,isOwned:!0}))}catch(e){throw console.error("Error fetching accessible knowledge bases:",e),e}}async function B(){try{const e=c(),t=`${u.lambServer}/creator/knowledgebases/ingestion-plugins`;console.log("Fetching ingestion plugins from:",t);const o=await fetch(t,{headers:{Authorization:`Bearer ${e}`}});if(!o.ok)throw console.error("API error response:",o.status,o.statusText),new Error(`Error: ${o.status} - ${o.statusText}`);const r=await o.json();return console.log("Ingestion plugins response:",JSON.stringify(r,null,2)),r}catch(e){throw console.error("Error getting ingestion plugins:",e),e}}async function T(e,t,o,r={}){try{const s=c(),n=new FormData;n.append("file",t),n.append("plugin_name",o);for(const[g,w]of Object.entries(r))w!=null&&n.append(g,w);const a=`${u.lambServer}/creator/knowledgebases/kb/${e}/plugin-ingest-file`;console.log(`Uploading file to knowledge base ${e} using plugin ${o}:`,a);const i=await fetch(a,{method:"POST",headers:{Authorization:`Bearer ${s}`},body:n});if(!i.ok){console.error("API error response:",i.status,i.statusText);const g=await i.text();throw console.error("Error details:",g),new Error(`Error: ${i.status} - ${i.statusText}`)}const l=await i.json();return console.log("File ingestion response:",JSON.stringify(l,null,2)),l}catch(s){throw console.error("Error ingesting file with plugin:",s),s}}export{f as a,h as b,y as c,B as d,m as e,k as f,E as g,T as p,b as q,$ as u};
