import{A as p,g as u}from"./D5v_xaba.js";const d=!0,l=d;function m(){const e=localStorage.getItem("userToken");if(!e)throw new Error("Please log in to continue");return e}async function w(){const e=localStorage.getItem("userToken");if(!e)throw new Error("Not authenticated");const r=localStorage.getItem("userEmail");if(!r)throw new Error("User email not found");const o=`${p.lambServer}/lamb/v1/assistant/get_list_of_assistants/${encodeURIComponent(r)}`;console.log("Making API request to:",o);const a=`curl -X GET "${o}" \\
  -H "Authorization: Bearer ${e}" \\
  -H "Content-Type: application/json"`;console.log("Equivalent curl command:"),console.log(a);const c=await fetch(o,{headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!c.ok){const n=await c.json();throw console.error("API error response:",n),new Error(n.detail||"Failed to fetch assistants")}const t=await c.json();return console.log("API response status:",c.status),console.log("Raw API response data:",t),t.assistants||[]}async function f(e){try{const r=localStorage.getItem("userToken"),o=localStorage.getItem("userEmail");if(!r)throw new Error("Not authenticated");if(!o)throw new Error("User email not found");const a=await fetch(`${p.lambServer}/lamb/v1/assistant/delete_assistant/${e}?owner=${encodeURIComponent(o)}`,{method:"DELETE",headers:{Authorization:`Bearer ${r}`}});if(!a.ok){const c=await a.json();throw a.status===403?new Error("You do not have permission to delete this assistant"):a.status===404?new Error("Assistant not found"):new Error(c.detail||`Error: ${a.status}`)}return await a.json()}catch(r){throw console.error("Error deleting assistant:",r),r}}async function E(){try{const e=localStorage.getItem("userToken");if(!e)throw new Error("Not authenticated");const r=await fetch(`${p.lambServer}/lamb/v1/completions/list`,{headers:{Authorization:`Bearer ${e}`}});if(!r.ok){if(r.status===404)return console.warn("getSystemCapabilities: 404 Not Found, using empty defaults"),{};throw new Error(`Error: ${r.status}`)}return await r.json()}catch(e){throw console.error("Error fetching system capabilities:",e),e}}async function y(e){console.log("generateAssistantDescription called with:",e),console.log("Browser environment:",{isBrowser:l});try{const r=m();if(console.log("Auth state:",{tokenPresent:!0,tokenLength:r.length,tokenStart:r.substring(0,10)}),!e.name||!e.system_prompt)throw new Error("Name and system prompt are required");const o={name:e.name,system_prompt:e.system_prompt,prompt_template:e.prompt_template||"",api_callback:JSON.stringify({llm:e.llm||"",rag_processor:e.rag_processor||"no_rag"})};console.log("Request data validation:",{nameLength:o.name.length,systemPromptLength:o.system_prompt.length,hasPromptTemplate:!!o.prompt_template,apiCallback:JSON.parse(o.api_callback)}),console.log("Generating description with data:",o);const a=u("/assistant/generate_assistant_description");console.log("Request URL:",a);const c={"Content-Type":"application/json",Authorization:`Bearer ${r}`};console.log("Request headers:",c);const t=await fetch(a,{method:"POST",headers:c,body:JSON.stringify(o)});if(console.log("Response status:",t.status),console.log("Response headers:",Object.fromEntries(t.headers.entries())),!t.ok){const s=await t.text();if(console.error("Error response text:",s),t.status===401)throw new Error("Your session has expired. Please log in again.");if(t.status===403)throw new Error("You do not have permission to generate descriptions.");try{const i=JSON.parse(s);throw new Error(i.detail||`Error: ${t.status}`)}catch{throw new Error(`Error generating description: ${t.status} - ${s}`)}}let n;try{if(n=await t.json(),console.log("Response data:",n),!n||typeof n!="object")throw new Error("Invalid response format");if(n.description)return{description:n.description,status:"success"};if(n.status==="success"&&n.description)return n;throw console.error("Unexpected response format:",n),new Error("Unexpected response format from server")}catch(s){const i=await t.text();throw console.error("Error handling response:",{error:s,responseText:i,status:t.status,headers:Object.fromEntries(t.headers.entries())}),new Error("Failed to process server response")}}catch(r){throw console.error("Error generating description:",r),r}}async function k(e){var r;try{const o=localStorage.getItem("userToken");if(!o)throw new Error("Not authenticated");const a=u("/assistant/create_assistant");console.log("Making API request to create assistant:",a);const c=`curl -X POST "${a}" \\
  -H "Authorization: Bearer ${o}" \\
  -H "Content-Type: application/json" \\
  -d '${JSON.stringify(e,null,2)}'`;console.log("Equivalent curl command to create assistant:"),console.log(c);const t=await fetch(a,{method:"POST",headers:{Authorization:`Bearer ${o}`,"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){let s;try{if(s=await t.json(),console.log("Error response:",s),(r=s.detail)!=null&&r.includes("already exists for this owner")){const i=s.detail.match(/named '([^']+)' already exists/),h=i?i[1]:"unknown";throw new Error(`An assistant named '${h}' already exists. Please choose a different name.`)}}catch(i){if(typeof i=="object"&&i!==null&&"message"in i&&typeof i.message=="string"&&i.message.includes("already exists"))throw i;s={}}throw new Error(s.detail||`Error: ${t.status}`)}const n=await t.text();console.log("Create assistant raw response:",n),console.log("Response status:",t.status),console.log("Response headers:",Object.fromEntries(t.headers.entries()));try{const s=JSON.parse(n);return console.log("Create assistant parsed response:",{status:t.status,headers:Object.fromEntries(t.headers.entries()),data:s,type:typeof s,keys:s?Object.keys(s):null}),s}catch(s){throw console.error("Failed to parse response as JSON:",s),new Error("Invalid JSON response from server")}}catch(o){throw console.error("Error creating assistant:",o),o}}export{E as a,y as b,k as c,f as d,w as g};
