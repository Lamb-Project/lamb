import{t as u,h as Et,b as v,e as Z,s as c,g as ye}from"../chunks/DbBWcICI.js";import{i as Ot}from"../chunks/BW7Rn8V3.js";import{p as Nt,A as jt,n as Lt,l as a,o as r,q as o,B as q,$ as Ut,r as t,m as e,w as pe,t as L,v as me,C as Me,D as ke}from"../chunks/DMsokd5p.js";import{i as _}from"../chunks/MBI0PpQy.js";import{e as he,i as _e}from"../chunks/D6e1hy_S.js";import{s as ue,r as ot,a as be}from"../chunks/gPkShxx4.js";import{s as ge}from"../chunks/CG3iaoFh.js";import{b as it}from"../chunks/CFRbuANL.js";import{s as Jt,a as Bt}from"../chunks/BsHaMxS4.js";import{a as Gt}from"../chunks/BWNE5xtz.js";import{u as It}from"../chunks/CmzVOFLo.js";import{a as xe}from"../chunks/t--hEgTQ.js";var Ft=u('<div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6"><strong>Authentication Required:</strong> Please log in to access the MCP testing interface.</div>'),Ht=u('<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6"><strong>Error:</strong> </div>'),zt=u('<div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-6">Loading...</div>'),Xt=u('<div class="grid grid-cols-1 md:grid-cols-2 gap-4"><div><h3 class="font-medium text-gray-700">Server Info</h3> <p><strong>Status:</strong> </p> <p><strong>Protocol Version:</strong> </p> <p><strong>Name:</strong> </p> <p><strong>Version:</strong> </p></div> <div><h3 class="font-medium text-gray-700">Statistics</h3> <p><strong>Total Assistants:</strong> </p> <p><strong>MCP Integration:</strong> </p></div></div>'),Dt=u('<button><div class="font-medium"> </div> <div class="text-sm text-gray-600"> </div></button>'),Yt=u('<div><label class="block text-sm font-medium text-gray-700 mb-1"> </label> <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brand focus:border-transparent"></div>'),Vt=u('<div class="mt-4"><h5 class="font-medium text-gray-700 mb-2">Result:</h5> <pre class="bg-gray-100 p-3 rounded text-sm overflow-auto"> </pre></div>'),Wt=u('<div><h4 class="font-medium text-gray-700 mb-2"> </h4> <div class="space-y-3"><!> <button class="bg-brand text-white px-4 py-2 rounded hover:bg-brand-hover" style="background-color: #2271b3;">Test Prompt</button></div> <!></div>'),Kt=u('<div class="p-6"><h3 class="text-lg font-semibold text-gray-800 mb-4">Available Prompts</h3> <div class="grid grid-cols-1 lg:grid-cols-2 gap-6"><div><h4 class="font-medium text-gray-700 mb-2">Select a Prompt</h4> <div class="space-y-2"></div></div> <!></div></div>'),Qt=u('<div class="p-6 text-center text-gray-500"><p>No prompts available. You need to create assistants first.</p></div>'),Zt=u('<button><div class="font-medium"> </div> <div class="text-sm text-gray-600"> </div></button>'),er=u('<div><label class="block text-sm font-medium text-gray-700 mb-1"> </label> <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-brand focus:border-transparent"></div>'),tr=u('<div class="mt-4"><h5 class="font-medium text-gray-700 mb-2">Result:</h5> <pre class="bg-gray-100 p-3 rounded text-sm overflow-auto"> </pre></div>'),rr=u('<div><h4 class="font-medium text-gray-700 mb-2"> </h4> <div class="space-y-3"><!> <button class="bg-brand text-white px-4 py-2 rounded hover:bg-brand-hover" style="background-color: #2271b3;">Test Tool</button></div> <!></div>'),ar=u('<div class="p-6"><h3 class="text-lg font-semibold text-gray-800 mb-4">Available Tools</h3> <div class="grid grid-cols-1 lg:grid-cols-2 gap-6"><div><h4 class="font-medium text-gray-700 mb-2">Select a Tool</h4> <div class="space-y-2"></div></div> <!></div></div>'),sr=u('<div class="p-6 text-center text-gray-500"><p>No tools available yet.</p></div>'),or=u('<div class="p-3 border border-gray-200 rounded"><div class="font-medium"> </div> <div class="text-sm text-gray-600"> </div> <div class="text-xs text-gray-500 mt-1"> </div></div>'),ir=u('<div class="p-6"><h3 class="text-lg font-semibold text-gray-800 mb-4">Available Resources</h3> <div class="space-y-2"></div></div>'),dr=u('<div class="p-6 text-center text-gray-500"><p>No resources available yet.</p></div>'),lr=u(`<div class="p-6"><h3 class="text-lg font-semibold text-gray-800 mb-4">MCP Client Setup Instructions</h3> <div class="space-y-6"><div class="bg-blue-50 border border-blue-200 rounded-lg p-4"><h4 class="font-medium text-blue-800 mb-2">üîó Connect Your MCP Client</h4> <p class="text-blue-700 text-sm">Use the configuration below to connect your MCP client (like Claude Desktop, Cline, or other MCP-compatible tools) 
							to your LAMB assistants. Your assistants will appear as prompt templates that return fully crafted prompts with RAG context.</p></div> <div class="bg-gray-50 border border-gray-200 rounded-lg p-4"><h4 class="font-medium text-gray-800 mb-2">üë§ Your Configuration</h4> <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm"><div><span class="font-medium">User Email:</span> <code class="bg-white px-2 py-1 rounded border"> </code></div> <div><span class="font-medium">Server URL:</span> <code class="bg-white px-2 py-1 rounded border"> </code></div></div></div> <div><h4 class="font-medium text-gray-800 mb-3">üìã MCP Client Configuration</h4> <p class="text-sm text-gray-600 mb-3">Add this configuration to your MCP client's settings. For Claude Desktop, add it to your <code>claude_desktop_config.json</code> file:</p> <div class="bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto"><pre class="text-sm"><code> </code></pre></div> <div class="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded"><p class="text-sm text-yellow-800"><strong>‚ö†Ô∏è Important:</strong> Replace <code>your-email@example.com</code> with your actual email address: <code class="bg-white px-1 rounded"> </code></p></div></div> <div><h4 class="font-medium text-gray-800 mb-3">üîß Alternative: Using Official MCP Servers</h4> <p class="text-sm text-gray-600 mb-3">Use official MCP servers as proxies to connect to LAMB:</p> <div class="bg-gray-100 p-4 rounded-lg"><div class="space-y-4"><div><div class="font-medium mb-2">Option 1: Filesystem Server (Recommended)</div> <div class="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto"><pre><code></code></pre></div></div> <div><div class="font-medium mb-2">Option 2: Create Custom Server</div> <div class="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto"><pre><code></code></pre></div></div></div></div></div> <div><h4 class="font-medium text-gray-800 mb-3">‚úÖ Working Configuration Examples</h4> <p class="text-sm text-gray-600 mb-3">Here are tested configurations that work with popular MCP clients:</p> <div class="space-y-4"><div class="bg-blue-50 border border-blue-200 rounded-lg p-4"><h5 class="font-medium text-blue-800 mb-2">Option 1: Simple Node.js Proxy (Recommended)</h5> <div class="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto"><pre><code></code></pre></div> <p class="text-sm text-blue-700 mt-2">This creates a minimal proxy using only Node.js built-ins</p></div> <div class="bg-green-50 border border-green-200 rounded-lg p-4"><h5 class="font-medium text-green-800 mb-2">Option 2: cURL-based (Universal)</h5> <div class="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto"><pre><code> </code></pre></div> <p class="text-sm text-green-700 mt-2">Works on any system with curl and shell</p></div> <div class="bg-purple-50 border border-purple-200 rounded-lg p-4"><h5 class="font-medium text-purple-800 mb-2">Option 3: Python Proxy</h5> <div class="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto"><pre><code> </code></pre></div> <p class="text-sm text-purple-700 mt-2">Uses Python's built-in libraries</p></div></div></div> <div><h4 class="font-medium text-gray-800 mb-3">üõ†Ô∏è Available Endpoints</h4> <div class="space-y-2 text-sm"><div class="flex justify-between items-center p-2 bg-gray-50 rounded"><code>GET /status</code> <span class="text-gray-600">Server status and capabilities</span></div> <div class="flex justify-between items-center p-2 bg-gray-50 rounded"><code>GET /prompts/list</code> <span class="text-gray-600">List your LAMB assistants as prompts</span></div> <div class="flex justify-between items-center p-2 bg-gray-50 rounded"><code></code> <span class="text-gray-600">Get crafted prompt with RAG context</span></div> <div class="flex justify-between items-center p-2 bg-gray-50 rounded"><code>GET /tools/list</code> <span class="text-gray-600">List available tools (empty for now)</span></div> <div class="flex justify-between items-center p-2 bg-gray-50 rounded"><code>GET /resources/list</code> <span class="text-gray-600">List available resources (empty for now)</span></div></div></div> <div><h4 class="font-medium text-gray-800 mb-3">üöÄ How to Use</h4> <div class="space-y-3 text-sm"><div class="flex items-start space-x-3"><span class="bg-brand text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold" style="background-color: #2271b3;">1</span> <div><div class="font-medium">Configure your MCP client</div> <div class="text-gray-600">Add the JSON configuration to your MCP client (e.g., Claude Desktop)</div></div></div> <div class="flex items-start space-x-3"><span class="bg-brand text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold" style="background-color: #2271b3;">2</span> <div><div class="font-medium">Restart your MCP client</div> <div class="text-gray-600">Restart Claude Desktop or your MCP client to load the new server</div></div></div> <div class="flex items-start space-x-3"><span class="bg-brand text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold" style="background-color: #2271b3;">3</span> <div><div class="font-medium">Access your assistants</div> <div class="text-gray-600">Your LAMB assistants will appear as prompt templates in the MCP client</div></div></div> <div class="flex items-start space-x-3"><span class="bg-brand text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold" style="background-color: #2271b3;">4</span> <div><div class="font-medium">Use enriched prompts</div> <div class="text-gray-600">Get fully crafted prompts with RAG context, then use your preferred LLM</div></div></div></div></div> <div class="bg-red-50 border border-red-200 rounded-lg p-4"><h4 class="font-medium text-red-800 mb-2">üîß Troubleshooting</h4> <ul class="text-sm text-red-700 space-y-1"><li>‚Ä¢ Make sure you're logged in to LAMB with the correct email address</li> <li>‚Ä¢ Verify the server URL is accessible from your MCP client</li> <li>‚Ä¢ Check that you have created at least one assistant in LAMB</li> <li>‚Ä¢ Ensure the LTI secret matches your server configuration</li> <li>‚Ä¢ Restart your MCP client after configuration changes</li></ul></div></div></div>`),nr=u('<!> <!> <div class="bg-white rounded-lg shadow-md p-6 mb-8"><div class="flex justify-between items-center mb-4"><h2 class="text-xl font-semibold text-gray-800">MCP Server Status</h2> <button class="bg-brand text-white px-4 py-2 rounded hover:bg-brand-hover" style="background-color: #2271b3;">Refresh Status</button></div> <!></div> <div class="bg-white rounded-lg shadow-md mb-8"><div class="border-b border-gray-200"><nav class="-mb-px flex space-x-8 px-6"><button>Prompts</button> <button>Tools</button> <button>Resources</button> <button>Client Setup</button></nav></div> <!> <!> <!> <!></div>',1),vr=u('<div class="container mx-auto px-4 py-8"><h1 class="text-3xl font-bold text-gray-800 mb-8">MCP Testing Interface</h1> <!></div>');function Sr(dt,lt){Nt(lt,!1);const[nt,vt]=Jt(),ae=()=>Bt(It,"$user",nt);let J=q({}),ee=q(null),Te=q([]),Ae=q([]),Re=q([]),w=q(!1),M=q(null),K=q(null),se=q({}),we=q(null),H=q(null),oe=q({}),Se=q(null),S=q("prompts");jt(()=>{o(J,Gt()),Ue()});function ne(s){var te,ie;return`${(((ie=(te=e(J))==null?void 0:te.api)==null?void 0:ie.lambServer)||"http://localhost:9099").replace(/\/$/,"")}/lamb/v1/mcp${s}`}function ve(){var te,ie;const s=((ie=(te=e(J))==null?void 0:te.api)==null?void 0:ie.ltiSecret)||"pepino-secret-key",B=ae().email||"test@example.com";return{Authorization:`Bearer ${s}`,"X-User-Email":B,"Content-Type":"application/json"}}async function Ue(){o(w,!0),o(M,null);try{const s=await xe.get(ne("/status"),{headers:ve()});o(ee,s.data)}catch(s){o(M,`Failed to load MCP status: ${s.message}`),console.error("MCP Status Error:",s)}finally{o(w,!1)}}async function ct(){o(w,!0),o(M,null),o(S,"prompts");try{const s=await xe.get(ne("/prompts/list"),{headers:ve()});o(Te,s.data.prompts||[])}catch(s){o(M,`Failed to load MCP prompts: ${s.message}`),console.error("MCP Prompts Error:",s)}finally{o(w,!1)}}async function pt(){o(w,!0),o(M,null),o(S,"tools");try{const s=await xe.get(ne("/tools/list"),{headers:ve()});o(Ae,s.data.tools||[])}catch(s){o(M,`Failed to load MCP tools: ${s.message}`),console.error("MCP Tools Error:",s)}finally{o(w,!1)}}async function mt(){o(w,!0),o(M,null),o(S,"resources");try{const s=await xe.get(ne("/resources/list"),{headers:ve()});o(Re,s.data.resources||[])}catch(s){o(M,`Failed to load MCP resources: ${s.message}`),console.error("MCP Resources Error:",s)}finally{o(w,!1)}}async function ut(){if(e(K)){o(w,!0),o(M,null);try{const s=await xe.post(ne(`/prompts/get/${e(K).name}`),e(se),{headers:ve()});o(we,s.data)}catch(s){o(M,`Failed to test prompt: ${s.message}`),console.error("Prompt Test Error:",s)}finally{o(w,!1)}}}async function bt(){if(e(H)){o(w,!0),o(M,null);try{const s=await xe.post(ne(`/tools/call/${e(H).name}`),e(oe),{headers:ve()});o(Se,s.data)}catch(s){o(M,`Failed to test tool: ${s.message}`),console.error("Tool Test Error:",s)}finally{o(w,!1)}}}function gt(s){o(K,s),o(se,{}),o(we,null),s.arguments&&s.arguments.forEach(B=>{ke(se,e(se)[B.name]="")})}function xt(s){o(H,s),o(oe,{}),o(Se,null),s.inputSchema&&s.inputSchema.properties&&Object.keys(s.inputSchema.properties).forEach(B=>{ke(oe,e(oe)[B]="")})}Ot();var qe=vr();Et(s=>{Ut.title="MCP Testing - LAMB"});var ft=a(r(qe),2);{var yt=s=>{var B=Ft();v(s,B)},ht=s=>{var B=nr(),te=pe(B);{var ie=n=>{var p=Ht(),k=a(r(p));t(p),L(()=>c(k,` ${e(M)??""}`)),v(n,p)};_(te,n=>{e(M)&&n(ie)})}var Je=a(te,2);{var _t=n=>{var p=zt();v(n,p)};_(Je,n=>{e(w)&&n(_t)})}var Ee=a(Je,2),Oe=r(Ee),Be=a(r(Oe),2);t(Oe);var wt=a(Oe,2);{var St=n=>{var p=Xt(),k=r(p),E=a(r(k),2),z=a(r(E));t(E);var d=a(E,2),m=a(r(d));t(d);var T=a(d,2),A=a(r(T));t(T);var $=a(T,2),G=a(r($));t($),t(k);var R=a(k,2),b=a(r(R),2),l=a(r(b));t(b);var i=a(b,2),f=a(r(i));t(i),t(R),t(p),L(()=>{var x,h,O,C;c(z,` ${e(ee).status??""}`),c(m,` ${e(ee).protocolVersion??""}`),c(A,` ${((x=e(ee).serverInfo)==null?void 0:x.name)??""}`),c(G,` ${((h=e(ee).serverInfo)==null?void 0:h.version)??""}`),c(l,` ${((O=e(ee).statistics)==null?void 0:O.total_assistants)||"N/A"}`),c(f,` ${((C=e(ee).statistics)==null?void 0:C.mcp_integration)||"N/A"}`)}),v(n,p)};_(wt,n=>{e(ee)&&n(St)})}t(Ee);var Ge=a(Ee,2),Ne=r(Ge),Ie=r(Ne),Ce=r(Ie),Pe=a(Ce,2),$e=a(Pe,2),je=a($e,2);t(Ie),t(Ne);var Fe=a(Ne,2);{var Ct=n=>{var p=ye(),k=pe(p);{var E=d=>{var m=Kt(),T=a(r(m),2),A=r(T),$=a(r(A),2);he($,5,()=>e(Te),_e,(b,l)=>{var i=Dt(),f=r(i),x=r(f,!0);t(f);var h=a(f,2),O=r(h,!0);t(h),t(i),L(()=>{var C,N;ue(i,1,`w-full text-left p-3 border rounded hover:bg-gray-50 ${((C=e(K))==null?void 0:C.name)===e(l).name?"border-brand bg-blue-50":"border-gray-200"}`),ge(i,((N=e(K))==null?void 0:N.name)===e(l).name?"border-color: #2271b3;":""),c(x,e(l).name),c(O,e(l).description)}),Z("click",i,()=>gt(e(l))),v(b,i)}),t($),t(A);var G=a(A,2);{var R=b=>{var l=Wt(),i=r(l),f=r(i);t(i);var x=a(i,2),h=r(x);{var O=y=>{var g=ye(),U=pe(g);he(U,1,()=>e(K).arguments,_e,(X,P)=>{var j=Yt(),Q=r(j),re=r(Q);t(Q);var I=a(Q,2);ot(I),t(j),L(()=>{be(Q,"for",`prompt-arg-${e(P).name??""}`),c(re,`${e(P).name??""} ${e(P).required?"*":""}`),be(I,"id",`prompt-arg-${e(P).name??""}`),be(I,"placeholder",e(P).description)}),it(I,()=>e(se)[e(P).name],de=>ke(se,e(se)[e(P).name]=de)),v(X,j)}),v(y,g)};_(h,y=>{e(K).arguments&&y(O)})}var C=a(h,2);t(x);var N=a(x,2);{var ce=y=>{var g=Vt(),U=a(r(g),2),X=r(U,!0);t(U),t(g),L(P=>c(X,P),[()=>JSON.stringify(e(we),null,2)],Me),v(y,g)};_(N,y=>{e(we)&&y(ce)})}t(l),L(()=>{c(f,`Test Prompt: ${e(K).name??""}`),C.disabled=e(w)}),Z("click",C,ut),v(b,l)};_(G,b=>{e(K)&&b(R)})}t(T),t(m),v(d,m)},z=d=>{var m=Qt();v(d,m)};_(k,d=>{e(Te).length>0?d(E):d(z,!1)})}v(n,p)};_(Fe,n=>{e(S)==="prompts"&&n(Ct)})}var He=a(Fe,2);{var Pt=n=>{var p=ye(),k=pe(p);{var E=d=>{var m=ar(),T=a(r(m),2),A=r(T),$=a(r(A),2);he($,5,()=>e(Ae),_e,(b,l)=>{var i=Zt(),f=r(i),x=r(f,!0);t(f);var h=a(f,2),O=r(h,!0);t(h),t(i),L(()=>{var C,N;ue(i,1,`w-full text-left p-3 border rounded hover:bg-gray-50 ${((C=e(H))==null?void 0:C.name)===e(l).name?"border-brand bg-blue-50":"border-gray-200"}`),ge(i,((N=e(H))==null?void 0:N.name)===e(l).name?"border-color: #2271b3;":""),c(x,e(l).name),c(O,e(l).description)}),Z("click",i,()=>xt(e(l))),v(b,i)}),t($),t(A);var G=a(A,2);{var R=b=>{var l=rr(),i=r(l),f=r(i);t(i);var x=a(i,2),h=r(x);{var O=y=>{var g=ye(),U=pe(g);he(U,1,()=>Object.entries(e(H).inputSchema.properties),_e,(X,P)=>{let j=()=>e(P)[0],Q=()=>e(P)[1];var re=er(),I=r(re),de=r(I);t(I);var le=a(I,2);ot(le),t(re),L(D=>{be(I,"for",`tool-arg-${j()??""}`),c(de,`${j()??""} ${D??""}`),be(le,"id",`tool-arg-${j()??""}`),be(le,"placeholder",Q().description||"")},[()=>{var D;return(D=e(H).inputSchema.required)!=null&&D.includes(j())?"*":""}],Me),it(le,()=>e(oe)[j()],D=>ke(oe,e(oe)[j()]=D)),v(X,re)}),v(y,g)};_(h,y=>{var g;(g=e(H).inputSchema)!=null&&g.properties&&y(O)})}var C=a(h,2);t(x);var N=a(x,2);{var ce=y=>{var g=tr(),U=a(r(g),2),X=r(U,!0);t(U),t(g),L(P=>c(X,P),[()=>JSON.stringify(e(Se),null,2)],Me),v(y,g)};_(N,y=>{e(Se)&&y(ce)})}t(l),L(()=>{c(f,`Test Tool: ${e(H).name??""}`),C.disabled=e(w)}),Z("click",C,bt),v(b,l)};_(G,b=>{e(H)&&b(R)})}t(T),t(m),v(d,m)},z=d=>{var m=sr();v(d,m)};_(k,d=>{e(Ae).length>0?d(E):d(z,!1)})}v(n,p)};_(He,n=>{e(S)==="tools"&&n(Pt)})}var ze=a(He,2);{var $t=n=>{var p=ye(),k=pe(p);{var E=d=>{var m=ir(),T=a(r(m),2);he(T,5,()=>e(Re),_e,(A,$)=>{var G=or(),R=r(G),b=r(R,!0);t(R);var l=a(R,2),i=r(l,!0);t(l);var f=a(l,2),x=r(f);t(f),t(G),L(()=>{c(b,e($).name),c(i,e($).description),c(x,`URI: ${e($).uri??""}`)}),v(A,G)}),t(T),t(m),v(d,m)},z=d=>{var m=dr();v(d,m)};_(k,d=>{e(Re).length>0?d(E):d(z,!1)})}v(n,p)};_(ze,n=>{e(S)==="resources"&&n($t)})}var Mt=a(ze,2);{var kt=n=>{var p=lr(),k=a(r(p),2),E=a(r(k),2),z=a(r(E),2),d=r(z),m=a(r(d),2),T=r(m,!0);t(m),t(d);var A=a(d,2),$=a(r(A),2),G=r($,!0);t($),t(A),t(z),t(E);var R=a(E,2),b=a(r(R),4),l=r(b),i=r(l),f=r(i,!0);t(i),t(l),t(b);var x=a(b,2),h=r(x),O=a(r(h),4),C=r(O,!0);t(O),t(h),t(x),t(R);var N=a(R,2),ce=a(r(N),4),y=r(ce),g=r(y),U=a(r(g),2),X=r(U),P=r(X);P.textContent=JSON.stringify({mcpServers:{"lamb-filesystem":{command:"npx",args:["-y","@modelcontextprotocol/server-filesystem","/tmp"]}}},null,2),t(X),t(U),t(g);var j=a(g,2),Q=a(r(j),2),re=r(Q),I=r(re);I.textContent=`# First create a custom server:
npx @modelcontextprotocol/create-server lamb-proxy

# Then configure:
${JSON.stringify({mcpServers:{"lamb-proxy":{command:"node",args:["/path/to/lamb-proxy/build/index.js"]}}},null,2)??""}`,t(re),t(Q),t(j),t(y),t(ce),t(N);var de=a(N,2),le=a(r(de),4),D=r(le),Xe=a(r(D),2),De=r(Xe),Tt=r(De);Tt.textContent=JSON.stringify({mcpServers:{"lamb-simple":{command:"node",args:["-e","const http=require('http');process.stdin.on('data',d=>{const r=JSON.parse(d);http.get(`http://localhost:9099/lamb/v1/mcp/status`,{headers:{'Authorization':'Bearer pepino-secret-key','X-User-Email':'your-email@example.com'}},res=>{let data='';res.on('data',c=>data+=c);res.on('end',()=>process.stdout.write(data+'\\n'))})});"]}}},null,2),t(De),t(Xe),me(2),t(D);var Le=a(D,2),Ye=a(r(Le),2),Ve=r(Ye),We=r(Ve),At=r(We,!0);t(We),t(Ve),t(Ye),me(2),t(Le);var Ke=a(Le,2),Qe=a(r(Ke),2),Ze=r(Qe),et=r(Ze),Rt=r(et,!0);t(et),t(Ze),t(Qe),me(2),t(Ke),t(le),t(de);var tt=a(de,2),rt=a(r(tt),2),at=a(r(rt),4),qt=r(at);qt.textContent="POST /prompts/get/{prompt_name}",me(2),t(at),me(4),t(rt),t(tt),me(4),t(k),t(p),L((Y,V,W)=>{var F,fe;c(T,ae().email||"Not logged in"),c(G,((fe=(F=e(J))==null?void 0:F.api)==null?void 0:fe.lambServer)||"http://localhost:9099"),c(f,Y),c(C,ae().email||"your-email@example.com"),c(At,V),c(Rt,W)},[()=>{var Y,V,W,F,fe,st;return JSON.stringify({mcpServers:{"lamb-server":{command:"node",args:["-e",`
const { spawn } = require('child_process');
const https = require('https');

// Simple HTTP proxy to LAMB MCP server
const makeRequest = (method, path, data) => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: '${new URL(((V=(Y=e(J))==null?void 0:Y.api)==null?void 0:V.lambServer)||"http://localhost:9099").hostname}',
      port: ${new URL(((F=(W=e(J))==null?void 0:W.api)==null?void 0:F.lambServer)||"http://localhost:9099").port||9099},
      path: '/lamb/v1/mcp' + path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ${((st=(fe=e(J))==null?void 0:fe.api)==null?void 0:st.ltiSecret)||"pepino-secret-key"}',
        'X-User-Email': '${ae().email||"your-email@example.com"}'
      }
    };
    
    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => resolve(JSON.parse(data)));
    });
    
    req.on('error', reject);
    if (data) req.write(JSON.stringify(data));
    req.end();
  });
};

// Handle MCP protocol
process.stdin.on('data', async (data) => {
  try {
    const request = JSON.parse(data.toString());
    let response;
    
    if (request.method === 'initialize') {
      response = await makeRequest('GET', '/status');
    } else if (request.method === 'prompts/list') {
      response = await makeRequest('GET', '/prompts/list');
    } else if (request.method === 'prompts/get') {
      response = await makeRequest('POST', '/prompts/get/' + request.params.name, request.params.arguments);
    }
    
    process.stdout.write(JSON.stringify(response) + '\\n');
  } catch (err) {
    process.stdout.write(JSON.stringify({error: err.message}) + '\\n');
  }
});
				`]}}},null,2)},()=>{var Y,V,W,F;return JSON.stringify({mcpServers:{"lamb-curl":{command:"sh",args:["-c",`while read line; do curl -s -X GET -H "Authorization: Bearer ${((V=(Y=e(J))==null?void 0:Y.api)==null?void 0:V.ltiSecret)||"pepino-secret-key"}" -H "X-User-Email: ${ae().email||"your-email@example.com"}" "${((F=(W=e(J))==null?void 0:W.api)==null?void 0:F.lambServer)||"http://localhost:9099"}/lamb/v1/mcp/status"; done`]}}},null,2)},()=>{var Y,V,W,F;return JSON.stringify({mcpServers:{"lamb-python":{command:"python3",args:["-c",`import sys,json,urllib.request;[print(json.dumps(json.loads(urllib.request.urlopen(urllib.request.Request('${((V=(Y=e(J))==null?void 0:Y.api)==null?void 0:V.lambServer)||"http://localhost:9099"}/lamb/v1/mcp/status',headers={'Authorization':'Bearer ${((F=(W=e(J))==null?void 0:W.api)==null?void 0:F.ltiSecret)||"pepino-secret-key"}','X-User-Email':'${ae().email||"your-email@example.com"}'})).read()))) for line in sys.stdin]`]}}},null,2)}],Me),v(n,p)};_(Mt,n=>{e(S)==="setup"&&n(kt)})}t(Ge),L(()=>{Be.disabled=e(w),ue(Ce,1,`py-4 px-1 border-b-2 font-medium text-sm ${e(S)==="prompts"?"border-brand text-brand":"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"}`),ge(Ce,e(S)==="prompts"?"border-color: #2271b3; color: #2271b3;":""),ue(Pe,1,`py-4 px-1 border-b-2 font-medium text-sm ${e(S)==="tools"?"border-brand text-brand":"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"}`),ge(Pe,e(S)==="tools"?"border-color: #2271b3; color: #2271b3;":""),ue($e,1,`py-4 px-1 border-b-2 font-medium text-sm ${e(S)==="resources"?"border-brand text-brand":"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"}`),ge($e,e(S)==="resources"?"border-color: #2271b3; color: #2271b3;":""),ue(je,1,`py-4 px-1 border-b-2 font-medium text-sm ${e(S)==="setup"?"border-brand text-brand":"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"}`),ge(je,e(S)==="setup"?"border-color: #2271b3; color: #2271b3;":"")}),Z("click",Be,Ue),Z("click",Ce,ct),Z("click",Pe,pt),Z("click",$e,mt),Z("click",je,()=>o(S,"setup")),v(s,B)};_(ft,s=>{ae().isLoggedIn?s(ht,!1):s(yt)})}t(qe),v(dt,qe),Lt(),vt()}export{Sr as component};
